@page "/register"
@using System.ComponentModel.DataAnnotations
@using EatEase.Contracts
@using MassTransit
@using Microsoft.AspNetCore.Components.Forms
@inject IRequestClient<RegisterRequest> RequestClient;

<h3>Register</h3>

<EditForm Model="_model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" @bind-Value="_model.Username" class="form-control"/>
        <ValidationMessage For="@(() => _model.Username)"/>
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="_model.Email" class="form-control"/>
        <ValidationMessage For="@(() => _model.Email)"/>
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="_model.Password" type="password" class="form-control"/>
        <ValidationMessage For="@(() => _model.Password)"/>
    </div>

    <button type="submit" class="btn-submit">Register</button>
</EditForm>

@if (_successMessage != null)
{
    <p class="success-message">@_successMessage</p>
}

@if (_errorMessage != null)
{
    <p class="error-message">@_errorMessage</p>
}

@code {
    private readonly RegistrationModel _model = new RegistrationModel();
    private string? _successMessage;
    private string? _errorMessage;

    private async Task HandleValidSubmit()
    {
        var response = await RequestClient.GetResponse<UserCreated, ErrorRegistering>(new
        {
            _model.Username,
            _model.Email,
            _model.Password
        });

        if (response.Is(out Response<ErrorRegistering>? result))
        {
            _errorMessage = result.Message.Error;
            return;
        }

        if (response.Is(out Response<UserCreated>? created))
        {
            _successMessage = $"User created {created.Message.Email}";
        }
    }

    public class RegistrationModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(8, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = string.Empty;
    }

}